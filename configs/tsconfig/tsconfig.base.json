{
  /**
   * Compiler Options
   *
   * NOTE:
   *
   * Ordered and grouped according to
   * https://www.typescriptlang.org/tsconfig
   */
  "compilerOptions": {
    /**
     * Type Checking
     *
     * - `strict` to reduce type issues
     */
    "strict": true,
    /**
     * Interop Constraints
     *
     * - allow default imports like `import x from 'x'`
     * - esModuleInterop supports supports
     *   - `import * as x from 'x'` and
     *   - `import x from 'x'`
     * - ensure case sensitivity
     * - strict isolated modules to help with interop
     */
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "isolatedModules": true,
    /**
     * Languages and Environment
     *
     * - `target` and `lib` for modern JavaScript
     */
    "target": "esnext",
    "lib": ["ESNext", "DOM", "DOM.Iterable"],
    "jsx": "preserve",
    /**
     * Modules
     *
     * - `baseUrl` to support `src/abc` to access `./src/abc`
     * - `commonjs` for node projects
     * - `node` for Node.js CommonJS implementation (`node12` or `nodenext` for future)
     * - support JSON with `resolveJsonModule`
     * - `rootDir` to specify what `.dist` root will be
     * - `typeRoots` for where to look for premade types to be included
     */
    "baseUrl": ".",
    /**
     * Removed `module` from the base config because it is different in many
     * tsconfig. By leaving it out here, we try to make it more explicit when
     * extending tsconfig.base.json.
     */
    // "module": "commonjs",
    /**
     * Setting this to `node` means that TypeScript won't support `exports`.
     * We are keeping it like this for now because there's a likelihood that
     * others have it set up this way and we want our imported libraries to
     * break if they are.
     *
     * https://github.com/microsoft/TypeScript/issues/33079#issuecomment-1043271180
     *
     * To fix the breakage, we would use `node12` or greater or `nodenext`
     */
    "moduleResolution": "node",
    /**
     * Moved to tsconfig.custom.json
     */
    // "paths": {
    //   "~/*": ["../../packages/wysimark/*"]
    //   /**
    //    * Required to support `typeRoots`
    //    * https://stackoverflow.com/questions/64287224/typeroots-fails-to-find-d-ts-declaration-files-in-project
    //    */
    //   // "*": ["types/*"]
    // },
    "resolveJsonModule": true,
    /**
     * Why not `rootDir`?
     *
     * When in our monorepo, we need to remove `rootDir` from tsconfig because
     * all the files have to be under `rootDir` and since these rootDir is
     * relative to this shared `tsconfig` and none of the files for the
     * actual packages are in this `tsconfig` workspace, the `rootDir` setting
     * ends up causing issues.
     *
     * NOTE:
     *
     * Leave this here for the moment though. We may be tempted to put `rootDir`
     * back in temporarily to help with creating a better build file with
     * tsc. In that case, this comment is helpful.
     */
    // "rootDir": ".",
    /**
     * Removed typeRoots
     *
     * We removed typeRoots because if we specify them, then the specified
     * typeRoots are used exactly. Previously, we needed this to specify our
     * custom `./types`; however, it is now better to use the default because
     * it automatically includes the types of parent `node_modules` directory
     * such as the `node_modules` at the top of our monorepo.
     *
     * If we do need to add our own custom `typeRoots` be sure to include
     * references to all the relevant `node_modules` directories.
     */
    // "typeRoots": [
    // "./types"
    // "./node_modules/@types"
    // "../../node_modules/@types"
    // ],

    /**
     * Emit
     *
     * - Don't emit in the regular `tsconfig`. We only do it in `tsconfig.build`
     */
    "noEmit": true,
    /**
     * Completeness
     *
     * - `skipLibCheck` improves performance but sacrifices accuracy with duplicate libraries
     */
    "skipLibCheck": true,
    /**
     * This increases the length of the type information that is displayed in
     * VSCode when hovering over a type to 1600 characters. This is helpful
     * when inspecting a type.
     *
     * https://stackoverflow.com/questions/53113031/how-to-see-a-fully-expanded-typescript-type-without-n-more-and/53131824#53131824
     */
    "noErrorTruncation": true
  }
  /**
   * Given the use of our monorepo, it's probably best for us to specify
   * these in each specific package.
   */
  // "include": ["**/*.ts", "**/*.tsx"],
  // "exclude": ["node_modules", ".dist"]
}
